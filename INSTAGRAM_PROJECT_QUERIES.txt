QUERIES

>>>TO CREATE DATABASE
---------------------
create Database instagram;

>>>Use DATABASE
---------------
use instagram;

>>>TO CREATE USERS TABLE
-------------------------

CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(20) UNIQUE
);

>>>TO CREATE POSTS TABLE
-------------------------
CREATE TABLE Posts (
    post_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    caption TEXT,
    image_url VARCHAR(200),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

>>>TO CREATE COMMENTS TABLE
-------------------------
CREATE TABLE Comments (
    comment_id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT NOT NULL,
    user_id INT NOT NULL,
    comment_text TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES Posts(post_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);


>>>TO CREATE LIKES TABLE
-------------------------
CREATE TABLE Likes (
    like_id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES Posts(post_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);


>>>TO CREATE FOLLOWERS TABLE
-------------------------
CREATE TABLE Followers (
    follower_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    follower_user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (follower_user_id) REFERENCES Users(user_id)
);


>>>INSERTING INTO USERS TABLE
-----------------------------
INSERT INTO Users (name, email, phone_number)
VALUES
    ('John Smith', 'johnsmith@gmail.com', '1234567890'),
    ('Jane Doe', 'janedoe@yahoo.com', '0987654321'),
    ('Bob Johnson', 'bjohnson@gmail.com', '1112223333'),
    ('Alice Brown', 'abrown@yahoo.com', NULL),
    ('Mike Davis', 'mdavis@gmail.com', '5556667777');
    
>>>INSERTING INTO POSTS TABLE
-----------------------------
INSERT INTO Posts (user_id, caption, image_url)
VALUES
    (1, 'Beautiful sunset', '<https://www.example.com/sunset.jpg>'),
    (2, 'My new puppy', '<https://www.example.com/puppy.jpg>'),
    (3, 'Delicious pizza', '<https://www.example.com/pizza.jpg>'),
    (4, 'Throwback to my vacation', '<https://www.example.com/vacation.jpg>'),
    (5, 'Amazing concert', '<https://www.example.com/concert.jpg>');
    

>>>INSERTING INTO COMMENTS TABLE
-----------------------------
INSERT INTO Comments (post_id, user_id, comment_text)
VALUES
    (1, 2, 'Wow! Stunning.'),
    (1, 3, 'Beautiful colors.'),
    (2, 1, 'What a cutie!'),
    (2, 4, 'Aww, I want one.'),
    (3, 5, 'Yum!'),
    (4, 1, 'Looks like an awesome trip.'),
    (5, 3, 'Wish I was there!');
    

>>>INSERTING INTO LIKES TABLE
-----------------------------
INSERT INTO Likes (post_id, user_id)
VALUES
    (1, 2),
    (1, 4),
    (2, 1),
    (2, 3),
    (3, 5),
    (4, 1),
    (4, 2),
    (4, 3),
    (5, 4),
    (5, 5);

>>>INSERTING INTO FOLLOWERS TABLE
-----------------------------
INSERT INTO Followers (user_id, follower_user_id)
VALUES
    (1, 2),
    (2, 1),
    (1, 3),
    (3, 1),
    (1, 4),
    (4, 1),
    (1, 5),
    (5, 1);


>>>UPDATING THE CAPTION OF post_id 3
------------------------------------
UPDATE Posts
SET caption = 'Best pizza ever'
WHERE post_id = 3;


>>>SELECTING ALL THE POSTS WHERE user_id IS 1
---------------------------------------------
SELECT *
FROM Posts
WHERE user_id = 1;


>>>SELECTING ALL THE POSTS AND ORDERING THEM BY created_at IN DESCENDING ORDER
------------------------------------------------------------------------------
SELECT *
FROM Posts
ORDER BY created_at DESC;


>>>COUNTING THE NUMBER OF LIKES FOR EACH POST AND SHOWING ONLY THE POSTS WITH MORE THEN 2 LIKES
-----------------------------------------------------------------------------------------------
SELECT Posts.post_id, COUNT(Likes.like_id) AS num_likes
FROM Posts
LEFT JOIN Likes ON Posts.post_id = Likes.post_id
GROUP BY Posts.post_id
HAVING COUNT(Likes.like_id) > 2;


>>>FINDING THE TOTAL NUMBER OF LIKES FOR ALL POSTS
--------------------------------------------------

SELECT SUM(num_likes) AS total_likes
FROM (
    SELECT COUNT(Likes.like_id) AS num_likes
    FROM Posts
    LEFT JOIN Likes ON Posts.post_id = Likes.post_id
    GROUP BY Posts.post_id
) AS likes_by_post;


>>>FINDING ALL THE USERS WHO HAVE COMMENTED ON post_id 1
---------------------------------------------------------
SELECT name
FROM Users
WHERE user_id IN (
    SELECT user_id
    FROM Comments
    WHERE post_id = 1
);


>>>RANKING THE POSTS BASED ON THE NUMBER OF LIKES
-------------------------------------------------
SELECT 
    post_id, 
    num_likes, 
    RANK() OVER (ORDER BY num_likes DESC) AS ranking
FROM (
    SELECT 
        p.post_id, 
        COUNT(l.like_id) AS num_likes
    FROM Posts p
    LEFT JOIN Likes l ON p.post_id = l.post_id
    GROUP BY p.post_id
) AS likes_by_post;


>>>CATEGORIZING THE POSTS BASED ON THE NUMBER OF LIKES
------------------------------------------------------
SELECT
    post_id,
    CASE
        WHEN num_likes = 0 THEN 'No likes'
        WHEN num_likes < 5 THEN 'Few likes'
        WHEN num_likes < 10 THEN 'Some likes'
        ELSE 'Lots of likes'
    END AS like_category
FROM (
    SELECT 
        p.post_id, 
        COUNT(l.like_id) AS num_likes
    FROM Posts p
    LEFT JOIN Likes l ON p.post_id = l.post_id
    GROUP BY p.post_id
) AS likes_by_post;

-- Finding all the posts created in the last month
>>>FINDING ALL THE POSTS CREATED IN THE LAST MONTH
--------------------------------------------------
SELECT *
FROM Posts
WHERE created_at >= DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m-01')
  AND created_at < DATE_FORMAT(CURDATE(), '%Y-%m-01');